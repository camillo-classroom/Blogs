@page "/autenticacao/login"
@using Blogs.DTO.ControleAcessos
@using Blogs.Front.Helpers

@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Login</h3>


    <div class="form-group">
        <label for="email">Email:</label>
        <input type="email" class="form-control" id="email" @bind="Email" />
    </div>
    <div class="form-group">
        <label for="Senha">Senha:</label>
        <input type="password" class="form-control" id="Senha" @bind="Senha" />
    </div>
    @if (!string.IsNullOrEmpty(Mensagem))
    {
        <div class="alert alert-danger mt-2">
            @Mensagem
        </div>
    }

    <button class="btn btn-primary mt-2" @onclick="EfetuarLogin">Entrar</button>



@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string? RedirecionarCasoSucesso { get; set; }

    private string? Mensagem { get; set; }
    private string Email { get; set; } = string.Empty;
    private string Senha { get; set; } = string.Empty;

    private async Task EfetuarLogin()
    {
        if (string.IsNullOrEmpty(Email))
        {
            Mensagem = "È necessário informar o email.";
            this.StateHasChanged();
            return;
        }

        if (string.IsNullOrEmpty(Senha))
        {
            Mensagem = "È necessário informar a senha.";
            this.StateHasChanged();
            return;
        }

        try
        {
            await EfetuarLoginAsync();
        }
        catch (Exception ex)
        {
            Mensagem = ex.Message;
            this.StateHasChanged();
            return;
        }

        if (!string.IsNullOrWhiteSpace(RedirecionarCasoSucesso))
        {
            Navigation.NavigateTo(RedirecionarCasoSucesso, true);
            return;
        }

        Navigation.NavigateTo("/", true);
    }

    public async Task EfetuarLoginAsync()
    {
        var login = new LoginDTO
        {
            Email = Email,
            Senha = Senha
        };

        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");

        if (!string.IsNullOrEmpty(token))
            await JS.InvokeVoidAsync("localStorage.removeItem", "token");

        token = await ApiBackend.PostAsync<string, LoginDTO>("usuarios/login", new LoginDTO
        {
            Email = Email,
            Senha = Senha
        });

        if (string.IsNullOrEmpty(token))
            throw new Exception("Não foi possível efetuar o login.");
        
        await JS.InvokeVoidAsync("localStorage.setItem", "token", token);
    }
}
